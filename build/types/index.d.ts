// Generated by dts-bundle v0.7.3

declare module '@elonbezos/vengarljs' {
    import store from "@elonbezos/vengarljs/store";
    import { addGlobalCSS } from "@elonbezos/vengarljs/litecss";
    type DefineComp = (c: {
        useState: (key: any) => [Function, Function];
        onAttached: Function;
        beforeFirstRender: Function;
        onRender: Function;
        beforeRender: Function;
        onRemove: Function;
        useGlobal: (key: string) => [Function, Function];
        html: Function;
        query: Function;
        queryAll: Function;
        fetcher: Function;
        attributes: any;
        css: Function;
        rawCss: Function;
        cx: Function;
        nc: Function;
        props: any;
        self: any;
    }) => () => [string[], ...any[]];
    function createComp(name: string, defineComp: DefineComp, main?: boolean): void | {
        name: string;
        type: string;
        getUniqTag(inc?: number): string;
        register(clazz: any, name: string): any;
        define(): any;
    };
    export { createComp, store, addGlobalCSS };
}

declare module '@elonbezos/vengarljs/store' {
    const _default: {
        __add(symbol: symbol, foreignContext: any): object;
        __get(symbol: symbol): any;
        __addToExisting(symbol: symbol, addedState: any): object;
        __replace(symbolState: symbol, symbolKey: symbol, newVal: any): any;
        remove(symbol: symbol): object;
        createGlobalState(obj: any): object;
        subscribeToGlobal(key: string, symbol: symbol): object;
        setGlobal(key: string, val: any): boolean;
        getGlobal(key?: string): any;
        getGlobalValues(): any;
        getGlobalState(): object;
    };
    export default _default;
}

declare module '@elonbezos/vengarljs/litecss' {
    export default class {
        shadowContainer: any;
        styleQueue: string[];
        generatedClasses: Map<string, string>;
        injectedStyle: string;
        namespaces: Map<string, string>;
        constructor(shadowContainer: any);
        parser(strings: TemplateStringsArray, ...inputs: string[]): string;
        cx(...args: any[]): string;
        injectRawCSS(strings: TemplateStringsArray, ...inputs: string[]): void;
        addCSS(): void;
        execQueue(): void;
        namespaceCSS(namespace: string, newClassName: string): string;
    }
    export function addGlobalCSS(strings: TemplateStringsArray, ...inputs: string[]): void;
}

